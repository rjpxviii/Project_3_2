
# Matchmaking Platform Support Contribution with PUMS DATA

This project is an addition to new potential online matchmaking platforms using new PUMS data. It is a contribution to enhance matchmaking algorithms, and provide scalability while ensuring data security and user privacy. The data represents a randomized, anonymized sample from a county-sized population, offering statistically relevant insights for improved matchmaking experiences.

---

## Features
- **Scalable API**: Supports integration with dating platforms to handle user data efficiently.
- **Customizable Filters**: Provides advanced filtering options based on age, race, gender, education level, and more.
- **Anonymized Data**: Ensures all user data is anonymized, safeguarding privacy and ethical compliance.
- **Compatibility**: Easily integrates with existing infrastructure and supports deployment on local servers or cloud environments.
- **Security and Integrity**: Designed with robust security measures to protect data integrity and comply with data privacy regulations.
- ** A PostgresSQL db was used because there was no unstructured data

---

## Setup Instructions

### 1. Clone the Repository
Use the following command to clone the repository:

git clone https://github.com/your-repository/backend-solution.git

Navigate to the project directory:

cd backend-solution


### 2. Create a Virtual Environment
Set up a Python virtual environment:

python -m venv venv

Activate the virtual environment:
- **Windows**:

  .\venv\Scripts\activate

- **Linux/Mac**:

  source venv/bin/activate


### 3. Install Dependencies
Install the required Python packages:

pip install -r requirements.txt


### 4. Configure the Database
Ensure a PostgreSQL database is set up. Update the following database details in the `config.py` or directly in the code:
- Host: `localhost` # or another connection
- Database Name: `Project 3`
- User: `postgres` # or your username
- Password: `<Your Password>`
- Port: `5432`

### 5. Run the Flask App
Start the Flask server:

Porject_3_app.py

Access the application at (for localhost):

http://127.0.0.1:5000/


---

## Endpoints

### 1. Filter Data
**URL**: `/data/filter`  
**Method**: `GET`  
**Description**: Filters data from the `demographic_data` table based on various parameters.

| Parameter   | Type   | Description                    |
|-------------|--------|--------------------------------|
| `min_age`   | int    | Minimum age of users           |
| `max_age`   | int    | Maximum age of users           |
| `race`      | int    | Race identifier                |
| `education` | int    | Education level identifier     |
| `income`    | int    | Minimum income                 |
| `sex`       | int    | Gender (1: Male, 2: Female)    |

**Example Request**:

http://127.0.0.1:5000/data/filter?min_age=20&max_age=30&race=1&sex=2


### 2. Get Origins
**URL**: `/data/origins`  
**Method**: `GET`  
**Description**: Retrieves data from the `origins` table based on the `serialno`.

| Parameter   | Type   | Description                    |
|-------------|--------|--------------------------------|
| `serialno`  | string | Unique serial number           |

**Example Request**:

http://127.0.0.1:5000/data/origins?serialno=Test12345


---

## Deployment

### 1. Local Server Deployment
- Ensure PostgreSQL is running locally.
- Run the Flask app on your server.
- Test the application using the provided endpoints.

### 2. Cloud Deployment
Deploy the application to a cloud platform (e.g., AWS, Heroku, GCP) with the following steps:
1. Containerize the app using Docker.
2. Configure the environment variables for database credentials.
3. Set up autoscaling and monitoring for production environments.

---

## Ethical Considerations
- **Data Privacy**: All data is anonymized and cleansed of personally identifiable information (PII).
- **Geospatial Security**: Geospatial identifiers have been removed to prevent the linking of data to specific locations.
- **Ethical Sampling**: The dataset is a random sample.
- **Compliance**: PUMS data is free to use for the public.

---

## Future Development
- **Enhanced Filters**: Support additional parameters for more personalized matchmaking.
- **Monitoring Tools**: Add dashboards to monitor database performance and user behavior analytics.
- **Visulization**

---


## Comments

This readme was generated by AI with human input

---

## Sources
- DATA
https://www2.census.gov/programs-surveys/acs/data/pums/2023/1-Year/
- DATA DICTIONARY
https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMS_Data_Dictionary_2023.pdf


